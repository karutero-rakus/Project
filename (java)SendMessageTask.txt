//###########################################################
//			MEMO
//サーバにメッセージを送信するプログラム
//###########################################################

package com.example.j14234.project_v5_2;

import android.content.Context;
import android.os.AsyncTask;
import android.widget.TextView;

import java.io.IOException;
import java.io.InterruptedIOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;

import static com.example.j14234.project_v5_2.SendRegTask.MAXTRIES;
import static com.example.j14234.project_v5_2.SendRegTask.PACKETSIZE;
import static com.example.j14234.project_v5_2.SendRegTask.TIMEOUT;
import static com.example.j14234.project_v5_2.SendRegTask.recvRes;
import static com.example.j14234.project_v5_2.SendRegTask.socket;
import static com.example.j14234.project_v5_2.SendRegTask.tries;
import static com.example.j14234.project_v5_2.SendRegTask.ServAddr;

public class SendMessageTask extends AsyncTask<String,Integer,String> {
    private String sendmessage;
    private String recvmessage;
    private TextView sendResult;

    private CallBackTask callbacktask;

    //結果を反映させるTextViewを取得
    public SendMessageTask(Context context){
        super();
        MessageActivity activity = (MessageActivity)context;
        sendResult = (TextView) activity.findViewById(R.id.SendResult);
    }

    //別スレッドで処理
    @Override
    protected String doInBackground(String... value){
        StringBuilder builder = new StringBuilder();
        try{
            //ソケットを作成
            socket = new DatagramSocket();
            socket.setSoTimeout(TIMEOUT); //受信待機時間の最大値（ミリ秒）
            sendmessage = value[0];
            byte[] sendbuf = sendmessage.getBytes();
            byte[] recvbuf = new byte[PACKETSIZE];
            //送信パケット
            DatagramPacket sendpacket = new DatagramPacket(sendbuf,sendbuf.length,ServAddr);
            //受信パケット
            DatagramPacket recvPacket = new DatagramPacket(recvbuf,recvbuf.length);

            do{
                //パケット送信
                System.out.println("パケット送信");
                socket.send(sendpacket);
                try{
                    //パケット受信
                    socket.receive(recvPacket);
                    recvmessage = new String(recvbuf,0,recvPacket.getLength());
                    System.out.println("受信:"+recvmessage);
                    /*
                    if(!recvPacket.getAddress().equals(ServAddr)){
                        throw new IOException("違う宛先からパケットが届いた");
                    }
                    */
                    recvRes = true;

                }catch (InterruptedIOException e){
                    tries += 1;
                    System.out.println("タイムアウトしたので再送します。");
                }
            }while((!recvRes) && (tries < MAXTRIES)); //recvResがfalseでtriesが5以下だったらループ
        }catch(IOException e){
            e.printStackTrace();
        }finally {
            socket.close();
        }
        if(recvRes != false) {
            String[] sendmessageresult = sendmessage.split("/") ;
            builder.append(sendmessageresult[1]);
        }else{
            builder.append("0");
        }
        return builder.toString();
    }
    //非同期処理後TextViewに反映
    @Override
    protected void onPostExecute(String result) {
        if (result != "0") {
            callbacktask.CallBack(result);
            result = result + "\n";
            sendResult.append(result);
        }
    }

    //Callback用
    public void senOnCallBack(CallBackTask _cbj){
        callbacktask = _cbj;
    }
    public static class CallBackTask{
        public void CallBack(String result){
        }
    }
}
