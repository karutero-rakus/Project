//###########################################################
//			MEMO
//ログイン後の画面用プログラム
//###########################################################

package com.example.j14234.project_v5_2;

import android.app.DialogFragment;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.widget.SearchView;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.ListView;
import android.widget.Toast;

import java.util.ArrayList;
import static com.example.j14234.project_v5_2.MainActivity.MODE;

public class SubMainActivity extends AppCompatActivity {
    private DatabaseHelper helper = null;
    ArrayAdapter<String> adminadapter;
    ArrayAdapter<String> friendadapter;
    private String DeleteFriendName;
    private int DeleteFriendId;

    private SearchView sv;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_submain);

        sv = (SearchView)findViewById(R.id.search);
    }

    protected void onResume() { //フォアグラウンドになる時実行
        super.onResume();
        Cursor cs = null;
        Cursor cs1 = null;
        ArrayList<String> admindata = new ArrayList<>();
        ArrayList<String> frienddata = new ArrayList<>();
        helper = new DatabaseHelper(this);
        SQLiteDatabase db = helper.getReadableDatabase();
        try {
            String[] cols = {"NAME"};
            cs = db.query("user_info", cols, null, null, null, null, null, null);
            if (cs.moveToFirst()) {
                admindata.add(cs.getString(0));
            } else { //ここは普段は実行されない
                admindata.add("unknown User");
                Toast.makeText(this, "データがありません", Toast.LENGTH_SHORT).show();
            }
            cs.close();
            cs1 = db.query("friend_info", cols, null, null, null, null, null, null);
            if (cs1.moveToFirst()) {
                do {
                    frienddata.add(cs1.getString(0));
                } while (cs1.moveToNext());
            } else {
                Toast.makeText(this, "さぁ、友達を作ろう", Toast.LENGTH_SHORT).show();
            }
            cs1.close();
        } finally {
            db.close();
        }
        adminadapter = new ArrayAdapter<>(this, android.R.layout.simple_list_item_1, admindata);
        ListView adminlist = (ListView) findViewById(R.id.adminlist);
        adminlist.setAdapter(adminadapter);

        friendadapter = new ArrayAdapter<>(this, android.R.layout.simple_list_item_1, frienddata);
        final ListView friendlist = (ListView) findViewById(R.id.friendlist);
        friendlist.setAdapter(friendadapter);

        //フレンドリスト項目をクリックした時の処理を定義
        friendlist.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            //onItemClick(選択されたリストの親となるウィジェット、選択された項目、選択された項目の位置（先頭項目が0）、選択された項目のid値)
            public void onItemClick(AdapterView<?> av, View view, int position, long id) {
                MODE = "2/";
                Intent i = new Intent(SubMainActivity.this, MessageActivity.class);
                i.putExtra("Position", position); //データベース位置
                startActivity(i);
            }
        });

        //フレンドリスト長押しイベントの処理を定義-----------------------------------------------------------------------11/17
        friendlist.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
            //onItemLongClick(選択されたリストの親となるウィジェット、選択された項目、選択された項目の位置（先頭項目が0）、選択された項目のid値)
            public boolean onItemLongClick(AdapterView<?> av, View view, int position, long id) {
                SQLiteDatabase db = helper.getReadableDatabase();
                Cursor cs = null;
                String[] clos = {"NAME", "ID"};
                cs = db.query("friend_info", clos, null, null, null, null, null, null);
                if (cs.moveToPosition(position)) {
                    DeleteFriendName = cs.getString(0);
                    DeleteFriendId = cs.getInt(1);
                    System.out.println("DeleteFriendName:" + DeleteFriendName);
                } else {
                    return true; //失敗
                }
                //ダイアログ表示
                DialogFragment deletefriendDialog = new DeleteFriendDialog();
                Bundle args = new Bundle();
                args.putString("DeleteFriendName", DeleteFriendName);
                deletefriendDialog.setArguments(args);
                deletefriendDialog.show(getFragmentManager(), "deletefriend_button");

                return true; //trueだとクリックイベントまで処理させない
            }
        });

        //管理者リスト項目をクリックした時の処理定義
        adminlist.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            public void onItemClick(AdapterView<?> av, View view, int position, long id) {
                Intent i = new Intent(SubMainActivity.this, AdminInfo.class);
                startActivity(i);
            }
        });

        //フィルター機能を有効化--------------------------------------------------
        friendlist.setTextFilterEnabled(true);
        sv.setOnQueryTextListener(new SearchView.OnQueryTextListener(){
            public boolean onQueryTextChange(String text){
                if(text == null || text.equals("")){
                    friendlist.clearTextFilter();
                }else{
                    friendlist.setFilterText(text);
                }
                return false;
            }

            public boolean onQueryTextSubmit(String arg0){
                return false;
            }
        });
        //--------------------------------------------------------------


    }

    //メニュー定義ファイルをもとにオプションメニュー作成
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.option_menu, menu);
        return true;
    }

    //メニュー選択時処理
    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case R.id.usersearch: //ユーザー検索処理
                Intent i = new Intent(SubMainActivity.this, UserSearch.class);
                startActivity(i);
                break;
        }
        return true;
    }

    //DeleteFriendDialogから返されるメソッド
    public void onReturnValue(int value) {
        helper = new DatabaseHelper(this);
        SQLiteDatabase db = helper.getWritableDatabase();
        try {
            if (value == 1) {
                db.delete("friend_info", "id =" + DeleteFriendId, null);
                deleteFile(DeleteFriendId + ".tok");
            } else {
                System.out.println("削除を行わない");
            }
        } finally {
            db.close();
            onResume();
        }
    }
}
